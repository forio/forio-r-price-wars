(function () {
    'use strict';
    function resolveNumber(value, ref) { return value > 0 && value < 1 ? value * ref : value; }

    function resolvePadding(options) {
        var w = options.chart.plotWidth;
        var h = options.chart.plotHeight;

        return {
            top: resolveNumber(options.pie.piePadding.top, h),
            bottom: resolveNumber(options.pie.piePadding.bottom, h),
            left: resolveNumber(options.pie.piePadding.left, w),
            right: resolveNumber(options.pie.piePadding.right, w),
        };
    }

    function pieLegend(data, layer, options) {
        var padding = resolvePadding(options);
        var w = options.chart.plotWidth - padding.left - padding.right;
        var h = options.chart.plotHeight - padding.top - padding.bottom;
        var shortSide = Math.min(w, h);
        var rad = shortSide / 2;
        padding.left = padding.left || w / 2 - rad;
        padding.top = padding.top || h / 2 - rad;
        var centerX = rad + padding.left;
        var centerY = rad + padding.top;
        var keyFn = function (d) { return d.data.x; };
        var format = d3.format('.2s');

        var filteredData = _.filter(data[0].data, function (p) { return p.y; });
        var pie =  d3.layout.pie().value(function (d) { return d.y; }).sort(null);
        var arc = d3.svg.arc().outerRadius(rad).innerRadius(resolveNumber(options.pie.innerRadius, rad));

        layer.attr('transform', 'translate(0,0)');

        var text = layer.selectAll('.pie-legend')
            .data(pie(filteredData), keyFn);

        text.enter().append('text')
            .attr('class', function (d) { return 'pie-legend ' + d.data.x; } );

        text.exit().remove();

        text.attr('transform', function (d) {
            var c = arc.centroid(d);
            var posX = Math.round(c[0] + centerX);
            var posY = Math.round(c[1] + centerY);

            return 'translate(' + (posX) + ',' + (posY) + ')';
        })
        .attr('dy', '.31em')
        .attr('text-anchor', 'middle')
        .text(function (d) {
            if (d.endAngle - d.startAngle < options.pieLegend.minAngle) return '';
            return options.pieLegend.formatter.call(this, d, options);
            // return options.pieLegend.formatter.call(this, d) : d.data.x + '<br>' + format(d.data.y);
        });

        // split lines at <br>
        text.each(function () {
            var el = d3.select(this);
            var text = el.text();
            var parts = text.split('<br>');
            var longest = _.reduce(parts, function (longest, cur) {
                return longest.length > cur.length ? longest : cur;
            }, '');
            var bounds = _.nw.textBounds(longest, '.legend-line');
            el.text('');
            _.each(parts, function (p, i) {
                el.append('tspan')
                    .attr('class', function (d) { return 'legend-line legend-line-' + (i+1) + ' ' + d.data.x; })
                    .text(p).attr('x', 0).attr('dy', (bounds.height + 3) * i);
            });
        });


    }

    var formatters = {
        percentage: function (d, options) {
            // show the % that each slice represents from the total
            var ff = d3.format(options.pieLegend.format);
            return ff((d.endAngle-d.startAngle) / (2.0 * Math.PI));
        },

        value: function (d, options) {
            // show only the actual 'y' value
            var ff = d3.format(options.pieLegend.format);
            return ff(d.value);
        },

        xy: function (d, options) {
            // show x and y values on different lines
            var ff = d3.format(options.pieLegend.format);
            return d.data.x + '<br>' + ff(d.data.y);
        }
    };

    pieLegend.defaults = {
        pieLegend: {
            format: '%',

            formatter: function (d, options) {
                var fn = formatters[options.pieLegend.showAs] || formatters.percentage;
                return fn.call(this, d, options);
            },

            minAngle: 0.4,

            showAs: 'percentage' // could be 'percentage' or 'value' or 'xy'
        }
    };

    Contour.export('pieLegend', pieLegend);
})();
